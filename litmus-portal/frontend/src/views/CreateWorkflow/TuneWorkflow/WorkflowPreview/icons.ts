import { getNode } from '../../../../utils/createSVGNode';

const getIcon = (iconType: string): SVGElement => {
  const icon = getNode('g');

  switch (iconType) {
    case 'pending': {
      // Pending Icon
      const path1 = getNode('path', {
        d: 'M5 0.570801C2.24305 0.570801 0 2.81385 0 5.5708C0 8.32775 2.24305 10.5708 5 10.5708C7.75695 10.5708 10 8.32775 10 5.5708C10 2.81385 7.75695 0.570801 5 0.570801ZM5 9.9458C2.58758 9.9458 0.625003 7.98322 0.625003 5.5708C0.625003 3.15838 2.58758 1.1958 5 1.1958C7.41242 1.1958 9.375 3.15838 9.375 5.5708C9.375 7.98322 7.41242 9.9458 5 9.9458Z',
        class: 'pendingIcon',
      });
      const path2 = getNode('path', {
        d: 'M5.3125 2.4458H4.6875V5.70019L6.65405 7.66674L7.09594 7.22484L5.3125 5.4414V2.4458Z',
        class: 'pendingIcon',
      });
      icon.appendChild(path1);
      icon.appendChild(path2);
      break;
    }
    case 'running': {
      const path = getNode('path', {
        d: 'M6.00059 12.5708C5.19074 12.5708 4.40434 12.4126 3.66481 12.0997C2.9499 11.7974 2.30882 11.3638 1.75798 10.813C1.20715 10.2622 0.773513 9.62119 0.47114 8.90635C0.158219 8.16689 0 7.38057 0 6.5708C0 6.3376 0.18869 6.14893 0.421916 6.14893C0.655142 6.14893 0.843832 6.3376 0.843832 6.5708C0.843832 7.26689 0.979783 7.94189 1.24934 8.57822C1.50952 9.19228 1.88104 9.74424 2.35453 10.2177C2.82801 10.6911 3.38002 11.0638 3.99414 11.3228C4.62936 11.5911 5.30442 11.7271 6.00059 11.7271C6.69675 11.7271 7.37181 11.5911 8.0082 11.3216C8.62233 11.0614 9.17433 10.6899 9.64782 10.2165C10.1213 9.74307 10.494 9.19111 10.753 8.57705C11.0214 7.9419 11.1573 7.26689 11.1573 6.5708C11.1573 5.87471 11.0214 5.19971 10.7518 4.56338C10.4925 3.95079 10.1173 3.3941 9.64664 2.92393C9.17695 2.45273 8.62007 2.0774 8.00703 1.81885C7.37181 1.55049 6.69675 1.41455 6.00059 1.41455C5.76736 1.41455 5.57867 1.22588 5.57867 0.992676C5.57867 0.759473 5.76736 0.570801 6.00059 0.570801C6.81043 0.570801 7.59684 0.729004 8.33636 1.04189C9.05127 1.34424 9.69235 1.77783 10.2432 2.32861C10.794 2.87939 11.2265 3.52158 11.5289 4.23525C11.8418 4.97471 12 5.76103 12 6.5708C12 7.38057 11.8418 8.16689 11.5289 8.90635C11.2277 9.62119 10.794 10.2622 10.2432 10.813C9.69235 11.3638 9.0501 11.7962 8.33636 12.0985C7.59684 12.4126 6.81043 12.5708 6.00059 12.5708Z',
        class: 'runningIcon',
      });
      icon.appendChild(path);
      break;
    }
    case 'succeeded': {
      const path = getNode('path', {
        d: 'M3.82918 7.64456C3.73372 7.74058 3.60349 7.79415 3.46821 7.79415C3.33292 7.79415 3.20269 7.74058 3.10723 7.64456L0.224382 4.76124C-0.0747942 4.46207 -0.0747942 3.97693 0.224382 3.67832L0.585358 3.31725C0.884628 3.01807 1.3692 3.01807 1.66838 3.31725L3.46821 5.11717L8.3316 0.253679C8.63087 -0.0454973 9.11591 -0.0454973 9.41462 0.253679L9.7756 0.614748C10.0748 0.913925 10.0748 1.39897 9.7756 1.69767L3.82918 7.64456Z',
        class: 'succeededIcon',
      });
      icon.appendChild(path);
      break;
    }
    case 'failed': {
      const path = getNode('path', {
        d: 'M6.64999 5.57111L9.74362 2.47748C10.0854 2.13567 10.0854 1.5815 9.74362 1.24022L9.3312 0.827802C8.98928 0.485881 8.43511 0.485881 8.09383 0.827802L5.00031 3.92133L1.90668 0.827161C1.56487 0.485347 1.0107 0.485347 0.669421 0.827161L0.25636 1.23958C-0.0854535 1.5815 -0.0854535 2.13567 0.25636 2.47695L3.35052 5.57111L0.257001 8.66463C-0.0849194 9.00656 -0.0849194 9.56072 0.257001 9.902L0.669421 10.3144C1.01124 10.6562 1.5654 10.6562 1.90668 10.3144L5.00031 7.22079L8.09383 10.3144C8.43575 10.6562 8.98992 10.6562 9.3312 10.3144L9.74362 9.902C10.0854 9.56008 10.0854 9.00591 9.74362 8.66463L6.64999 5.57111Z',
        class: 'failedIcon',
      });
      icon.appendChild(path);
      break;
    }
    default:
      break;
  }

  return icon;
};

export { getIcon };
