# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @authorized on FIELD_DEFINITION

type Cluster {
  cluster_id: ID!
  project_id: ID!
  cluster_name: String!
  description: String
  platform_name: String!
  access_key: String!
  is_registered: Boolean!
  is_cluster_confirmed: Boolean!
  is_active: Boolean!
  updated_at: String!
  created_at: String!
  cluster_type: String!
  no_of_schedules: Int
  no_of_workflows: Int
  token: String!
  agent_namespace: String
  serviceaccount: String
  agent_scope: String!
  agent_ns_exists: Boolean
  agent_sa_exists: Boolean
  last_workflow_timestamp: String!
}

input ClusterInput {
  cluster_name: String!
  description: String
  platform_name: String!
  project_id: ID!
  cluster_type: String!
  agent_namespace: String
  serviceaccount: String
  agent_scope: String!
  agent_ns_exists: Boolean
  agent_sa_exists: Boolean
  node_selector: String
}

type ClusterEvent {
  event_id: ID!
  event_type: String!
  event_name: String!
  description: String!
  cluster: Cluster!
}

type ActionPayload {
  request_type: String!
  k8s_manifest: String!
  namespace: String!
  external_data: String
}

type ClusterAction {
  project_id: ID!
  action: ActionPayload!
}

input ClusterActionInput {
  cluster_id: ID!
  action: String!
}

input ClusterEventInput {
  event_name: String!
  description: String!
  cluster_id: String!
  access_key: String!
}

input ClusterIdentity {
  cluster_id: String!
  access_key: String!
}

type ClusterConfirmResponse {
  isClusterConfirmed: Boolean!
  newAccessKey: String
  cluster_id: String
}

input WeightagesInput {
  experiment_name: String!
  weightage: Int!
}

input ChaosWorkFlowInput {
  workflow_id: String
  workflow_manifest: String!
  cronSyntax: String!
  workflow_name: String!
  workflow_description: String!
  weightages: [WeightagesInput!]!
  isCustomWorkflow: Boolean!
  project_id: ID!
  cluster_id: ID!
}

type ChaosWorkFlowResponse {
  workflow_id: String!
  cronSyntax: String!
  workflow_name: String!
  workflow_description: String!
  isCustomWorkflow: Boolean!
}

input WorkflowRunInput {
  workflow_id: ID!
  workflow_run_id: ID!
  workflow_name: String!
  execution_data: String!
  cluster_id: ClusterIdentity!
  completed: Boolean!
  isRemoved: Boolean
}

type PodLogResponse {
  workflow_run_id: ID!
  pod_name: String!
  pod_type: String!
  log: String!
}

input PodLog {
  cluster_id: ClusterIdentity!
  request_id: ID!
  workflow_run_id: ID!
  pod_name: String!
  pod_type: String!
  log: String!
}

input PodLogRequest {
  cluster_id: ID!
  workflow_run_id: ID!
  pod_name: String!
  pod_namespace: String!
  pod_type: String!
  exp_pod: String
  runner_pod: String
  chaos_namespace: String
}

type clusterRegResponse {
  token: String!
  cluster_id: String!
  cluster_name: String!
}

type SSHKey {
  publicKey: String!
  privateKey: String!
}

input GitConfig {
  ProjectID: String!
  Branch: String!
  RepoURL: String!
  AuthType: AuthType!
  Token: String
  UserName: String
  Password: String
  SSHPrivateKey: String
}
type GitConfigResponse {
  Enabled: Boolean!
  ProjectID: String!
  Branch: String
  RepoURL: String
  AuthType: AuthType
  Token: String
  UserName: String
  Password: String
  SSHPrivateKey: String
}

type ManifestTemplate {
  template_id: ID!
  manifest: String!
  template_name: String!
  template_description: String!
  project_id: String!
  project_name: String!
  created_at: String!
  is_removed: Boolean!
  isCustomWorkflow: Boolean!
}

input TemplateInput {
  manifest: String!
  template_name: String!
  template_description: String!
  project_id: String!
  isCustomWorkflow: Boolean!
}

type KubeObjectResponse {
  cluster_id: ID!
  kube_obj: String!
}

input KubeObjectData {
  request_id: ID!
  cluster_id: ClusterIdentity!
  kube_obj: String!
}

input KubeObjectRequest {
  cluster_id: ID!
  object_type: String!
  kube_obj_request: KubeGVRRequest!
}

input KubeGVRRequest {
  group: String!
  version: String!
  resource: String!
}

type Query {
  getWorkflowRuns(
    workflowRunsInput: GetWorkflowRunsInput!
  ): GetWorkflowsOutput! @authorized

  getCluster(project_id: String!, cluster_type: String): [Cluster!]! @authorized

  getUser(username: String!): User! @authorized

  #It is used to get projects by projectID
  getProject(projectID: String!): Project! @authorized

  #It is used to get projects by userID
  listProjects: [Project!]! @authorized

  users: [User!]! @authorized

  # Query to fetch workflow data for heatmap
  getHeatmapData(
    project_id: String!
    workflow_id: String!
    year: Int!
  ): [HeatmapData]! @authorized

  getWorkflowStats(
    project_id: ID!
    filter: TimeFrequency!
    show_workflow_runs: Boolean!
  ): [WorkflowStats]! @authorized

  getWorkflowRunStats(
    workflowRunStatsRequest: WorkflowRunStatsRequest!
  ): WorkflowRunStatsResponse! @authorized

  ListWorkflow(workflowInput: ListWorkflowsInput!): ListWorkflowsOutput!
    @authorized

  getCharts(HubName: String!, projectID: String!): [Chart!]! @authorized

  getHubExperiment(experimentInput: ExperimentInput!): Chart! @authorized

  getHubStatus(projectID: String!): [MyHubStatus]! @authorized

  getYAMLData(experimentInput: ExperimentInput!): String!

  GetPredefinedWorkflowList(HubName: String!, projectID: String!): [String!]!

  GetPredefinedExperimentYAML(experimentInput: ExperimentInput!): String!

  ListDataSource(project_id: String!): [DSResponse]! @authorized

  GetPromQuery(query: promInput): promResponse! @authorized

  GetPromLabelNamesAndValues(series: promSeriesInput): promSeriesResponse!
    @authorized

  GetPromSeriesList(ds_details: dsDetails): promSeriesListResponse! @authorized

  ListDashboard(
    project_id: String!
    cluster_id: String
    db_id: String): [listDashboardResponse] @authorized

  PortalDashboardData (
    project_id: String!
    hub_name: String!) : [PortalDashboardData!]! @authorized

  # Git Ops
  getGitOpsDetails(project_id: String!): GitConfigResponse! @authorized

  # Manifest Template
  ListManifestTemplate(project_id: String!): [ManifestTemplate]! @authorized

  GetTemplateManifestByID(template_id: String!): ManifestTemplate! @authorized

  #Image Registry Queries
  ListImageRegistry(project_id: String!): [ImageRegistryResponse!] @authorized

  GetImageRegistry(
    image_registry_id: String!
    project_id: String!
  ): ImageRegistryResponse! @authorized

  UsageQuery(query: UsageQuery!): UsageData! @authorized
}

type Mutation {
  #It is used to create external cluster.
  userClusterReg(clusterInput: ClusterInput!): clusterRegResponse! @authorized

  # Used to create a user
  createUser(user: CreateUserInput!): User! @authorized

  # Used to disable a user
  updateUserState(uid: String!, isDeactivate: Boolean!): String!
    @authorized

  # It is used to create a project
  createProject(projectName: String!): Project! @authorized

  updateUser(user: UpdateUserInput!): String! @authorized

  ## Workflow APIs
  # It is used to create chaosworkflow
  createChaosWorkFlow(input: ChaosWorkFlowInput!): ChaosWorkFlowResponse!
    @authorized

  reRunChaosWorkFlow(workflowID: String!): String! @authorized

  deleteChaosWorkflow(workflowid: String, workflow_run_id: String): Boolean!
    @authorized

  syncWorkflow(workflowid: String!, workflow_run_id: String!): Boolean!
    @authorized

  #Used for sending invitation
  sendInvitation(member: MemberInput!): Member @authorized

  #Used for accepting invitation
  acceptInvitation(member: MemberInput!): String! @authorized

  #Used for declining the invitation
  declineInvitation(member: MemberInput!): String! @authorized

  #Used for cancelling the sent invitation
  removeInvitation(member: MemberInput!): String! @authorized

  #Used for leaving a project
  leaveProject(member: MemberInput!): String! @authorized

  #Used to update project name
  updateProjectName(projectID: String!, projectName: String!): String!
    @authorized

  #It is used to confirm the subscriber registration
  clusterConfirm(identity: ClusterIdentity!): ClusterConfirmResponse!

  #It is used to send cluster related events from the subscriber
  newClusterEvent(clusterEvent: ClusterEventInput!): String!

  chaosWorkflowRun(workflowData: WorkflowRunInput!): String!

  podLog(log: PodLog!): String!

  kubeObj(kubeData: KubeObjectData!): String!

  addMyHub(myhubInput: CreateMyHub!, projectID: String!): MyHub! @authorized

  saveMyHub(myhubInput: CreateMyHub!, projectID: String!): MyHub! @authorized

  syncHub(id: ID!): [MyHubStatus!]! @authorized

  updateChaosWorkflow(input: ChaosWorkFlowInput): ChaosWorkFlowResponse!
    @authorized

  deleteClusterReg(cluster_id: String!): String! @authorized

  generaterSSHKey: SSHKey! @authorized

  updateMyHub(myhubInput: UpdateMyHub!, projectID: String!): MyHub! @authorized

  deleteMyHub(hub_id: String!): Boolean! @authorized

  # Gitops
  gitopsNotifer(clusterInfo: ClusterIdentity!, workflow_id: String!): String!

  enableGitOps(config: GitConfig!): Boolean! @authorized

  disableGitOps(project_id: String!): Boolean! @authorized

  updateGitOps(config: GitConfig!): Boolean! @authorized

  # Analytics
  createDataSource(datasource: DSInput): DSResponse @authorized

  createDashBoard(dashboard: createDBInput): listDashboardResponse! @authorized

  updateDataSource(datasource: DSInput!): DSResponse! @authorized

  updateDashboard(
    dashboard: updateDBInput!
    chaosQueryUpdate: Boolean!): String! @authorized

  updatePanel(panelInput: [panel]): String! @authorized

  deleteDashboard(db_id: String): Boolean! @authorized

  deleteDataSource(input: deleteDSInput!): Boolean! @authorized

  # Manifest Template
  createManifestTemplate(templateInput: TemplateInput): ManifestTemplate!
    @authorized

  deleteManifestTemplate(template_id: String!): Boolean! @authorized

  #Image Registry Mutations
  createImageRegistry(
    project_id: String!
    imageRegistryInfo: imageRegistryInput!
  ): ImageRegistryResponse! @authorized

  updateImageRegistry(
    image_registry_id: String!
    project_id: String!
    imageRegistryInfo: imageRegistryInput!
  ): ImageRegistryResponse! @authorized

  deleteImageRegistry(image_registry_id: String!, project_id: String!): String!
    @authorized
}

type Subscription {
  #It is used to listen cluster events from the graphql server
  clusterEventListener(project_id: String!): ClusterEvent! @authorized

  workflowEventListener(project_id: String!): WorkflowRun! @authorized

  getPodLog(podDetails: PodLogRequest!): PodLogResponse! @authorized

  #It is used to listen cluster operation request from the graphql server
  clusterConnect(clusterInfo: ClusterIdentity!): ClusterAction!

  getKubeObject(kubeObjectRequest: KubeObjectRequest!): KubeObjectResponse!
    @authorized

  viewDashboard(
    dashboardID: String
    promQueries: [promQueryInput!]!
    dashboardQueryMap: [queryMapForPanelGroup!]!
    dataVariables: dataVars!): dashboardPromResponse! @authorized
}
